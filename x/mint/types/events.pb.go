// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/mint/v1/events.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlockInflationEvent is emitted when new tokens are about to be minted in the given block.
type BlockInflationEvent struct {
	// mint_amount defines the total amount of tokens which will be minted in this block
	MintAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=mint_amount,json=mintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_amount"`
	// inflation defines the inflation rate used in the current block for minting
	Inflation github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=inflation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation"`
}

func (m *BlockInflationEvent) Reset()         { *m = BlockInflationEvent{} }
func (m *BlockInflationEvent) String() string { return proto.CompactTextString(m) }
func (*BlockInflationEvent) ProtoMessage()    {}
func (*BlockInflationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3040e045ca6b2fe8, []int{0}
}
func (m *BlockInflationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInflationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInflationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInflationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInflationEvent.Merge(m, src)
}
func (m *BlockInflationEvent) XXX_Size() int {
	return m.Size()
}
func (m *BlockInflationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInflationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInflationEvent proto.InternalMessageInfo

// BlockInflationDistributionEvent is emitted when new tokens are minted and distributed for an inflation recipient
type BlockInflationDistributionEvent struct {
	// recipient defines the name of the module of the inflation recipient
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// tokens defines the total number of tokens received by the inflation recipient
	Tokens types.Coin `protobuf:"bytes,2,opt,name=tokens,proto3" json:"tokens"`
}

func (m *BlockInflationDistributionEvent) Reset()         { *m = BlockInflationDistributionEvent{} }
func (m *BlockInflationDistributionEvent) String() string { return proto.CompactTextString(m) }
func (*BlockInflationDistributionEvent) ProtoMessage()    {}
func (*BlockInflationDistributionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3040e045ca6b2fe8, []int{1}
}
func (m *BlockInflationDistributionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInflationDistributionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInflationDistributionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInflationDistributionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInflationDistributionEvent.Merge(m, src)
}
func (m *BlockInflationDistributionEvent) XXX_Size() int {
	return m.Size()
}
func (m *BlockInflationDistributionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInflationDistributionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInflationDistributionEvent proto.InternalMessageInfo

func (m *BlockInflationDistributionEvent) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *BlockInflationDistributionEvent) GetTokens() types.Coin {
	if m != nil {
		return m.Tokens
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*BlockInflationEvent)(nil), "archway.mint.v1.BlockInflationEvent")
	proto.RegisterType((*BlockInflationDistributionEvent)(nil), "archway.mint.v1.BlockInflationDistributionEvent")
}

func init() { proto.RegisterFile("archway/mint/v1/events.proto", fileDescriptor_3040e045ca6b2fe8) }

var fileDescriptor_3040e045ca6b2fe8 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbd, 0x4a, 0x03, 0x41,
	0x14, 0x85, 0x77, 0x44, 0x02, 0x99, 0x14, 0xc2, 0x6a, 0x11, 0x43, 0x98, 0x48, 0x0a, 0xb1, 0xc9,
	0x0c, 0xab, 0x85, 0xb5, 0x6b, 0x2c, 0x02, 0x82, 0x90, 0xd2, 0x46, 0x66, 0xc7, 0x31, 0x19, 0x36,
	0x3b, 0x37, 0xec, 0x4c, 0x36, 0xc9, 0x5b, 0xf8, 0x30, 0x3e, 0x44, 0xca, 0x94, 0x62, 0x11, 0x24,
	0x79, 0x11, 0x99, 0xfd, 0x61, 0xb5, 0xb5, 0x9a, 0x9f, 0x73, 0xf9, 0xee, 0xb9, 0xf7, 0xe0, 0x2e,
	0x4f, 0xc5, 0x74, 0xc9, 0xd7, 0x2c, 0x51, 0xda, 0xb2, 0x2c, 0x60, 0x32, 0x93, 0xda, 0x1a, 0x3a,
	0x4f, 0xc1, 0x82, 0x7f, 0x52, 0xaa, 0xd4, 0xa9, 0x34, 0x0b, 0x3a, 0x67, 0x13, 0x98, 0x40, 0xae,
	0x31, 0x77, 0x2b, 0xca, 0x3a, 0x44, 0x80, 0x49, 0xc0, 0xb0, 0x88, 0x1b, 0xc9, 0xb2, 0x20, 0x92,
	0x96, 0x07, 0x4c, 0x80, 0xd2, 0x85, 0xde, 0xff, 0x40, 0xf8, 0x34, 0x9c, 0x81, 0x88, 0x47, 0xfa,
	0x6d, 0xc6, 0xad, 0x02, 0xfd, 0xe0, 0xba, 0xf8, 0x4f, 0xb8, 0xe5, 0xc0, 0x2f, 0x3c, 0x81, 0x85,
	0xb6, 0x6d, 0x74, 0x81, 0xae, 0x9a, 0x21, 0xdd, 0xec, 0x7a, 0xde, 0xd7, 0xae, 0x77, 0x39, 0x51,
	0x76, 0xba, 0x88, 0xa8, 0x80, 0x84, 0x95, 0xfc, 0xe2, 0x18, 0x98, 0xd7, 0x98, 0xd9, 0xf5, 0x5c,
	0x1a, 0x3a, 0x94, 0x62, 0x8c, 0x1d, 0xe2, 0x2e, 0x27, 0xf8, 0x8f, 0xb8, 0xa9, 0xaa, 0x16, 0xed,
	0xa3, 0x7f, 0xe1, 0x6a, 0x40, 0x7f, 0x85, 0x7b, 0x7f, 0x5d, 0x0f, 0x95, 0xb1, 0xa9, 0x8a, 0x16,
	0xf5, 0x04, 0x5d, 0xdc, 0x4c, 0xa5, 0x50, 0x73, 0x25, 0x2b, 0xff, 0xe3, 0xfa, 0xc3, 0xbf, 0xc5,
	0x0d, 0x0b, 0xb1, 0xd4, 0x26, 0xf7, 0xd2, 0xba, 0x3e, 0xa7, 0x45, 0x4b, 0xea, 0x16, 0x45, 0xcb,
	0x45, 0xd1, 0x7b, 0x50, 0x3a, 0x3c, 0x76, 0x36, 0xc7, 0x65, 0x79, 0x38, 0xda, 0xec, 0x09, 0xda,
	0xee, 0x09, 0xfa, 0xde, 0x13, 0xf4, 0x7e, 0x20, 0xde, 0xf6, 0x40, 0xbc, 0xcf, 0x03, 0xf1, 0x9e,
	0xd9, 0xaf, 0x31, 0xca, 0x70, 0x06, 0x5a, 0xda, 0x25, 0xa4, 0x71, 0xf5, 0x66, 0xab, 0x22, 0xcc,
	0x7c, 0xa6, 0xa8, 0x91, 0x47, 0x70, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0xea, 0xaa, 0x63, 0x5a,
	0xe9, 0x01, 0x00, 0x00,
}

func (m *BlockInflationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInflationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInflationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Inflation.Size()
		i -= size
		if _, err := m.Inflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MintAmount.Size()
		i -= size
		if _, err := m.MintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlockInflationDistributionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInflationDistributionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInflationDistributionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockInflationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Inflation.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *BlockInflationDistributionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockInflationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInflationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInflationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInflationDistributionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInflationDistributionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInflationDistributionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
